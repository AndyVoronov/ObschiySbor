import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://wrfcpsljchyetbmupqgc.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndyZmNwc2xqY2h5ZXRibXVwcWdjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkyOTY4MDQsImV4cCI6MjA3NDg3MjgwNH0.df9yt9tIP58S8JTPgvpreKqpVGkb01NtC1e7kYgg0rc';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function initDatabase() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ObschiySbor...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    const { data: testData, error: testError } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);

    if (testError) {
      if (testError.code === '42P01') {
        console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –º–∏–≥—Ä–∞—Ü–∏—é.\n');
        console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é —Å—Ö–µ–º—ã:');
        console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://wrfcpsljchyetbmupqgc.supabase.co');
        console.log('   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "SQL Editor"');
        console.log('   3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π query');
        console.log('   4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ database/schema.sql');
        console.log('   5. –í—Å—Ç–∞–≤—å—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "Run"');
        console.log('\n‚úÖ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞\n');

        // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ RPC
        await createBasicStructure();
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', testError.message);
      }
    } else {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.\n');
      await verifyTables();
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

async function createBasicStructure() {
  console.log('\n2Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');

  // –¢–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å DDL —á–µ—Ä–µ–∑ anon key,
  // –≤—ã–≤–µ–¥–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
  console.log('\nüìù –í–ê–ñ–ù–û: –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('\n   –û—Ç–∫—Ä–æ–π—Ç–µ SQL Editor –≤ Supabase –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
  console.log('   ' + '='.repeat(60));
  console.log(`
-- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
CREATE TABLE IF NOT EXISTS profiles (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  full_name TEXT,
  avatar_url TEXT,
  city TEXT,
  interests TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS events (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  category TEXT NOT NULL,
  event_date TIMESTAMP WITH TIME ZONE NOT NULL,
  location TEXT NOT NULL,
  max_participants INTEGER DEFAULT 10,
  current_participants INTEGER DEFAULT 0,
  creator_id UUID REFERENCES profiles(id) NOT NULL,
  status TEXT DEFAULT 'active',
  category_data JSONB,
  image_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS event_participants (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  event_id UUID REFERENCES events(id) ON DELETE CASCADE NOT NULL,
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
  status TEXT DEFAULT 'joined',
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(event_id, user_id)
);

-- RLS Policies
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE events ENABLE ROW LEVEL SECURITY;
ALTER TABLE event_participants ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Public profiles" ON profiles FOR SELECT USING (true);
CREATE POLICY "Users can update own profile" ON profiles FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Public events" ON events FOR SELECT USING (true);
CREATE POLICY "Users can create events" ON events FOR INSERT WITH CHECK (auth.uid() = creator_id);
CREATE POLICY "Creators can update events" ON events FOR UPDATE USING (auth.uid() = creator_id);

CREATE POLICY "Public participants" ON event_participants FOR SELECT USING (true);
CREATE POLICY "Users can join events" ON event_participants FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can leave events" ON event_participants FOR DELETE USING (auth.uid() = user_id);

-- Trigger –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name)
  VALUES (new.id, new.raw_user_meta_data->>'full_name');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
`);
  console.log('   ' + '='.repeat(60));
  console.log('\n‚úÖ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç\n');
}

async function verifyTables() {
  console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...\n');

  const tables = ['profiles', 'events', 'event_participants'];

  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);

      if (error) {
        console.log(`   ‚ùå ${table}: ${error.message}`);
      } else {
        console.log(`   ‚úÖ ${table}: —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    } catch (err) {
      console.log(`   ‚ùå ${table}: ${err.message}`);
    }
  }

  console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
  console.log('\nüì± –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥:');
  console.log('   cd frontend && npm run dev\n');
}

// –ó–∞–ø—É—Å–∫
initDatabase();
