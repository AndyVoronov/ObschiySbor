import { useState, useEffect, useRef } from 'react';
import './RecurringEventSettings.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π
 */
const RecurringEventSettings = ({ value = {}, onChange }) => {
  const [isRecurring, setIsRecurring] = useState(value.isRecurring || false);
  const [frequency, setFrequency] = useState(value.frequency || 'weekly');
  const [interval, setInterval] = useState(value.interval || 1);
  const [occurrenceCount, setOccurrenceCount] = useState(value.occurrenceCount || 10);
  const [daysOfWeek, setDaysOfWeek] = useState(value.daysOfWeek || []);
  const [endDate, setEndDate] = useState(value.endDate || '');
  const [endType, setEndType] = useState(value.endType || 'count'); // 'count' –∏–ª–∏ 'date'
  const isFirstRender = useRef(true);

  // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
  const weekDays = [
    { value: 1, label: '–ü–Ω', fullLabel: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
    { value: 2, label: '–í—Ç', fullLabel: '–í—Ç–æ—Ä–Ω–∏–∫' },
    { value: 3, label: '–°—Ä', fullLabel: '–°—Ä–µ–¥–∞' },
    { value: 4, label: '–ß—Ç', fullLabel: '–ß–µ—Ç–≤–µ—Ä–≥' },
    { value: 5, label: '–ü—Ç', fullLabel: '–ü—è—Ç–Ω–∏—Ü–∞' },
    { value: 6, label: '–°–±', fullLabel: '–°—É–±–±–æ—Ç–∞' },
    { value: 7, label: '–í—Å', fullLabel: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' },
  ];

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }

    if (onChange) {
      onChange({
        isRecurring,
        frequency,
        interval,
        occurrenceCount: endType === 'count' ? occurrenceCount : null,
        daysOfWeek: frequency === 'weekly' && daysOfWeek.length > 0 ? daysOfWeek : null,
        endDate: endType === 'date' ? endDate : null,
        endType,
      });
    }
  }, [isRecurring, frequency, interval, occurrenceCount, daysOfWeek, endDate, endType, onChange]);

  const handleDayToggle = (dayValue) => {
    setDaysOfWeek(prev => {
      if (prev.includes(dayValue)) {
        return prev.filter(d => d !== dayValue);
      } else {
        return [...prev, dayValue].sort();
      }
    });
  };

  const getRecurrenceDescription = () => {
    if (!isRecurring) return '';

    let desc = '–°–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è ';

    // –ß–∞—Å—Ç–æ—Ç–∞
    switch (frequency) {
      case 'daily':
        desc += interval === 1 ? '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' : `–∫–∞–∂–¥—ã–µ ${interval} –¥–Ω—è`;
        break;
      case 'weekly':
        if (daysOfWeek.length > 0) {
          const dayNames = daysOfWeek.map(d => weekDays.find(wd => wd.value === d)?.label).join(', ');
          desc += `–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–æ: ${dayNames}`;
        } else {
          desc += interval === 1 ? '–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é' : `–∫–∞–∂–¥—ã–µ ${interval} –Ω–µ–¥–µ–ª–∏`;
        }
        break;
      case 'monthly':
        desc += interval === 1 ? '–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü' : `–∫–∞–∂–¥—ã–µ ${interval} –º–µ—Å—è—Ü–∞`;
        break;
    }

    // –û–∫–æ–Ω—á–∞–Ω–∏–µ
    if (endType === 'count') {
      desc += `, –≤—Å–µ–≥–æ ${occurrenceCount} —Ä–∞–∑`;
    } else if (endDate) {
      desc += ` –¥–æ ${new Date(endDate).toLocaleDateString('ru-RU')}`;
    }

    return desc;
  };

  return (
    <div className="recurring-event-settings">
      <div className="recurring-toggle">
        <label className="toggle-label">
          <input
            type="checkbox"
            checked={isRecurring}
            onChange={(e) => setIsRecurring(e.target.checked)}
            className="toggle-checkbox"
          />
          <span className="toggle-switch"></span>
          <span className="toggle-text">üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ</span>
        </label>
      </div>

      {isRecurring && (
        <div className="recurring-options">
          {/* –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è */}
          <div className="form-group">
            <label htmlFor="frequency">–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</label>
            <select
              id="frequency"
              value={frequency}
              onChange={(e) => setFrequency(e.target.value)}
              className="form-control"
            >
              <option value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
              <option value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
              <option value="monthly">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</option>
            </select>
          </div>

          {/* –ò–Ω—Ç–µ—Ä–≤–∞–ª */}
          <div className="form-group">
            <label htmlFor="interval">
              –ò–Ω—Ç–µ—Ä–≤–∞–ª ({frequency === 'daily' ? '–¥–Ω–µ–π' : frequency === 'weekly' ? '–Ω–µ–¥–µ–ª—å' : '–º–µ—Å—è—Ü–µ–≤'})
            </label>
            <input
              type="number"
              id="interval"
              min="1"
              max="30"
              value={interval}
              onChange={(e) => setInterval(parseInt(e.target.value) || 1)}
              className="form-control"
            />
          </div>

          {/* –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π) */}
          {frequency === 'weekly' && (
            <div className="form-group">
              <label>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏</label>
              <div className="days-of-week">
                {weekDays.map((day) => (
                  <button
                    key={day.value}
                    type="button"
                    onClick={() => handleDayToggle(day.value)}
                    className={`day-button ${daysOfWeek.includes(day.value) ? 'active' : ''}`}
                    title={day.fullLabel}
                  >
                    {day.label}
                  </button>
                ))}
              </div>
              <small className="form-hint">
                –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
              </small>
            </div>
          )}

          {/* –¢–∏–ø –æ–∫–æ–Ω—á–∞–Ω–∏—è */}
          <div className="form-group">
            <label>–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</label>
            <div className="end-type-radio">
              <label className="radio-label">
                <input
                  type="radio"
                  value="count"
                  checked={endType === 'count'}
                  onChange={(e) => setEndType(e.target.value)}
                />
                <span>–ü–æ—Å–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π</span>
              </label>
              <label className="radio-label">
                <input
                  type="radio"
                  value="date"
                  checked={endType === 'date'}
                  onChange={(e) => setEndType(e.target.value)}
                />
                <span>–î–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –¥–∞—Ç—ã</span>
              </label>
            </div>
          </div>

          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π */}
          {endType === 'count' && (
            <div className="form-group">
              <label htmlFor="occurrenceCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π</label>
              <input
                type="number"
                id="occurrenceCount"
                min="1"
                max="100"
                value={occurrenceCount}
                onChange={(e) => setOccurrenceCount(parseInt(e.target.value) || 1)}
                className="form-control"
              />
              <small className="form-hint">
                –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ {occurrenceCount} —Å–æ–±—ã—Ç–∏–π
              </small>
            </div>
          )}

          {/* –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è */}
          {endType === 'date' && (
            <div className="form-group">
              <label htmlFor="endDate">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
              <input
                type="date"
                id="endDate"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
                className="form-control"
                min={new Date().toISOString().split('T')[0]}
              />
            </div>
          )}

          {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è */}
          {getRecurrenceDescription() && (
            <div className="recurrence-description">
              <p className="description-text">
                ‚ÑπÔ∏è {getRecurrenceDescription()}
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default RecurringEventSettings;
