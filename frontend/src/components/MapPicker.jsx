import { useEffect, useRef, useState, useCallback } from 'react';
import './MapPicker.css';

export default function MapPicker({
  initialPosition = { lat: 55.751244, lng: 37.618423 }, // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  onLocationSelect,
  onAddressChange
}) {
  const mapRef = useRef(null);
  const mapInstance = useRef(null);
  const placemarkInstance = useRef(null);
  const [address, setAddress] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoadingAddress, setIsLoadingAddress] = useState(false);
  const isInitialized = useRef(false);

  // –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Üí –∞–¥—Ä–µ—Å)
  const reverseGeocode = useCallback(async (coords) => {
    setIsLoadingAddress(true);

    try {
      const result = await window.ymaps.geocode(coords);
      const firstGeoObject = result.geoObjects.get(0);
      const addressText = firstGeoObject.getAddressLine();

      setAddress(addressText);
      if (onAddressChange) {
        onAddressChange(addressText);
      }
      if (onLocationSelect) {
        onLocationSelect({ lat: coords[0], lng: coords[1] });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      setAddress('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞');
    } finally {
      setIsLoadingAddress(false);
    }
  }, [onAddressChange, onLocationSelect]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–∞
  const updatePlacemark = useCallback((coords) => {
    if (placemarkInstance.current) {
      placemarkInstance.current.geometry.setCoordinates(coords);
      reverseGeocode(coords);
    }
  }, [reverseGeocode]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  useEffect(() => {
    if (isInitialized.current) return;

    const apiKey = import.meta.env.VITE_YANDEX_MAPS_API_KEY;

    const initMap = () => {
      if (!mapRef.current || mapInstance.current) return;

      const yandexMap = new window.ymaps.Map(mapRef.current, {
        center: [initialPosition.lat, initialPosition.lng],
        zoom: 13,
        controls: ['zoomControl', 'fullscreenControl']
      });

      mapInstance.current = yandexMap;

      // –°–æ–∑–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
      const initialPlacemark = new window.ymaps.Placemark(
        [initialPosition.lat, initialPosition.lng],
        {
          balloonContent: '–ú–µ—Å—Ç–æ —Å–æ–±—ã—Ç–∏—è'
        },
        {
          preset: 'islands#redDotIcon',
          draggable: true
        }
      );

      yandexMap.geoObjects.add(initialPlacemark);
      placemarkInstance.current = initialPlacemark;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
      yandexMap.events.add('click', (e) => {
        const coords = e.get('coords');
        updatePlacemark(coords);
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
      initialPlacemark.events.add('dragend', () => {
        const coords = initialPlacemark.geometry.getCoordinates();
        reverseGeocode(coords);
      });

      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
      reverseGeocode([initialPosition.lat, initialPosition.lng]);

      isInitialized.current = true;
    };

    if (!window.ymaps) {
      const script = document.createElement('script');
      script.src = `https://api-maps.yandex.ru/2.1/?apikey=${apiKey}&lang=ru_RU`;
      script.async = true;
      document.head.appendChild(script);

      script.onload = () => {
        window.ymaps.ready(() => {
          initMap();
        });
      };
    } else {
      window.ymaps.ready(() => {
        initMap();
      });
    }

    return () => {
      if (mapInstance.current) {
        mapInstance.current.destroy();
        mapInstance.current = null;
        placemarkInstance.current = null;
        isInitialized.current = false;
      }
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // –ü—Ä—è–º–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∞–¥—Ä–µ—Å ‚Üí –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
  const geocodeAddress = async (query) => {
    setIsLoadingAddress(true);

    try {
      const result = await window.ymaps.geocode(query);
      const firstGeoObject = result.geoObjects.get(0);

      if (firstGeoObject) {
        const coords = firstGeoObject.geometry.getCoordinates();
        const addressText = firstGeoObject.getAddressLine();

        if (mapInstance.current && placemarkInstance.current) {
          mapInstance.current.setCenter(coords, 15);
          placemarkInstance.current.geometry.setCoordinates(coords);
          setAddress(addressText);

          if (onAddressChange) {
            onAddressChange(addressText);
          }
          if (onLocationSelect) {
            onLocationSelect({ lat: coords[0], lng: coords[1] });
          }
        }
      } else {
        alert('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å');
    } finally {
      setIsLoadingAddress(false);
    }
  };

  const handleSearchClick = () => {
    if (searchQuery.trim()) {
      geocodeAddress(searchQuery);
    }
  };

  const handleSearchKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleSearchClick();
    }
  };

  return (
    <div className="map-picker">
      <div className="map-search">
        <input
          type="text"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞..."
          className="map-search-input"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          onKeyPress={handleSearchKeyPress}
        />
        <button type="button" className="map-search-btn" onClick={handleSearchClick} disabled={isLoadingAddress}>
          {isLoadingAddress ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏'}
        </button>
      </div>

      <div ref={mapRef} style={{ height: '400px', width: '100%' }} className="map-container" />

      {address && (
        <div className="map-address">
          <strong>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:</strong>
          <p>{address}</p>
        </div>
      )}

      <p className="map-hint">
        üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –º–∞—Ä–∫–µ—Ä, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
      </p>
    </div>
  );
}
