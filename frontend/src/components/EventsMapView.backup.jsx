import { useEffect } from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import { Link } from 'react-router-dom';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import './EventsMapView.css';

// –§–∏–∫—Å –¥–ª—è –∏–∫–æ–Ω–æ–∫ Leaflet
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

const EventsMapView = ({ events }) => {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
  const getMapCenter = () => {
    const validEvents = events.filter(e => e.latitude && e.longitude);

    if (validEvents.length === 0) {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ü–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤—ã
      return [55.751244, 37.618423];
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –ø–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º
    const avgLat = validEvents.reduce((sum, e) => sum + parseFloat(e.latitude), 0) / validEvents.length;
    const avgLng = validEvents.reduce((sum, e) => sum + parseFloat(e.longitude), 0) / validEvents.length;

    return [avgLat, avgLng];
  };

  const getCategoryName = (category) => {
    const categories = {
      board_games: '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã',
      cycling: '–í–µ–ª–æ–ø—Ä–æ–≥—É–ª–∫–∏',
      hiking: '–ü–æ—Ö–æ–¥—ã',
    };
    return categories[category] || category;
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
  const eventsWithLocation = events.filter(e => e.latitude && e.longitude);

  if (eventsWithLocation.length === 0) {
    return (
      <div className="events-map-empty">
        <p>üìç –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏</p>
        <p className="hint">–°–æ–±—ã—Ç–∏—è –±–µ–∑ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è</p>
      </div>
    );
  }

  return (
    <div className="events-map-container">
      <MapContainer
        center={getMapCenter()}
        zoom={11}
        style={{ height: '600px', width: '100%' }}
        className="events-map"
      >
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />

        {eventsWithLocation.map((event) => (
          <Marker
            key={event.id}
            position={[parseFloat(event.latitude), parseFloat(event.longitude)]}
          >
            <Popup>
              <div className="event-popup">
                {event.image_url && (
                  <img src={event.image_url} alt={event.title} className="popup-image" />
                )}
                <h3>{event.title}</h3>
                <p className="popup-category">{getCategoryName(event.category)}</p>
                <p className="popup-date">üìÖ {formatDate(event.event_date)}</p>
                <p className="popup-location">üìç {event.location}</p>
                <p className="popup-participants">
                  üë• {event.current_participants}/{event.max_participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                </p>
                <Link to={`/events/${event.id}`} className="popup-link">
                  –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
                </Link>
              </div>
            </Popup>
          </Marker>
        ))}
      </MapContainer>

      <div className="map-info">
        <p>üìç –ü–æ–∫–∞–∑–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ: {eventsWithLocation.length} –∏–∑ {events.length}</p>
      </div>
    </div>
  );
};

export default EventsMapView;
