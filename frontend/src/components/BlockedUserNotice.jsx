import { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../lib/supabase';
import AppealBlockModal from './AppealBlockModal';
import './BlockedUserNotice.css';

const BlockedUserNotice = ({ blockInfo, onAppealSubmitted }) => {
  const { user } = useAuth();
  const [showAppealModal, setShowAppealModal] = useState(false);
  const [isUnblocking, setIsUnblocking] = useState(false);
  const [blockExpired, setBlockExpired] = useState(false);

  if (!blockInfo || !blockInfo.is_blocked) {
    return null;
  }

  const isPermanent = !blockInfo.blocked_until;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  useEffect(() => {
    if (!isPermanent && blockInfo.blocked_until) {
      const checkExpiration = () => {
        const now = new Date();
        const until = new Date(blockInfo.blocked_until);
        setBlockExpired(until <= now);
      };

      checkExpiration();
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
      const interval = setInterval(checkExpiration, 60000);
      return () => clearInterval(interval);
    }
  }, [isPermanent, blockInfo.blocked_until]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
  const handleSelfUnblock = async () => {
    if (!blockExpired) return;

    setIsUnblocking(true);
    try {
      const { error } = await supabase.rpc('unblock_user', {
        p_user_id: user.id,
        p_unblocked_by: null,
        p_reason: '–°—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç—ë–∫ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)'
      });

      if (error) throw error;

      alert('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
      window.location.reload();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    } finally {
      setIsUnblocking(false);
    }
  };

  const blockedUntilDate = blockInfo.blocked_until
    ? new Date(blockInfo.blocked_until).toLocaleString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })
    : null;

  const blockedAtDate = blockInfo.blocked_at
    ? new Date(blockInfo.blocked_at).toLocaleString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })
    : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

  return (
    <>
      <div className="blocked-user-notice">
        <div className="blocked-notice-icon">üö´</div>
        <div className="blocked-notice-content">
          <h2 className="blocked-notice-title">
            {isPermanent ? '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞' : '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
          </h2>

          <div className="blocked-notice-details">
            <div className="blocked-detail-item">
              <span className="detail-label">–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</span>
              <span className="detail-value">{blockedAtDate}</span>
            </div>

            {!isPermanent && (
              <div className="blocked-detail-item">
                <span className="detail-label">–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ:</span>
                <span className="detail-value">{blockedUntilDate}</span>
              </div>
            )}

            <div className="blocked-detail-item">
              <span className="detail-label">–ü—Ä–∏—á–∏–Ω–∞:</span>
              <span className="detail-value reason">{blockInfo.block_reason}</span>
            </div>
          </div>

          <div className="blocked-notice-message">
            {blockExpired ? (
              <div className="block-expired-message">
                <p className="expired-text">
                  ‚è∞ <strong>–°—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç—ë–∫!</strong>
                </p>
                <p className="expired-help">
                  –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
                </p>
              </div>
            ) : (
              <>
                <p>
                  –í–æ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã <strong>–Ω–µ –º–æ–∂–µ—Ç–µ</strong>:
                </p>
                <ul>
                  <li>–°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è</li>
                  <li>–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö</li>
                </ul>
                <p className="blocked-notice-help">
                  –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–π, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ.
                </p>
              </>
            )}
          </div>

          <div className="blocked-actions">
            {blockExpired ? (
              <button
                className="btn-unblock-self"
                onClick={handleSelfUnblock}
                disabled={isUnblocking}
              >
                {isUnblocking ? '‚è≥ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞...' : '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è'}
              </button>
            ) : (
              <button
                className="btn-appeal-block"
                onClick={() => setShowAppealModal(true)}
              >
                üìù –û–±–∂–∞–ª–æ–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
              </button>
            )}
          </div>
        </div>
      </div>

      {showAppealModal && (
        <AppealBlockModal
          isOpen={showAppealModal}
          onClose={() => setShowAppealModal(false)}
          blockInfo={blockInfo}
          onSuccess={() => {
            setShowAppealModal(false);
            if (onAppealSubmitted) {
              onAppealSubmitted();
            }
          }}
        />
      )}
    </>
  );
};

export default BlockedUserNotice;
