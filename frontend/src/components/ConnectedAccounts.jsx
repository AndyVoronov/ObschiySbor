import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';
import './ConnectedAccounts.css';

const ConnectedAccounts = () => {
  const { user } = useAuth();
  const [identities, setIdentities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  useEffect(() => {
    if (user) {
      loadIdentities();
    }
  }, [user]);

  const loadIdentities = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
      const { data: { user: userData }, error } = await supabase.auth.getUser();

      if (error) throw error;

      setIdentities(userData?.identities || []);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö');
    } finally {
      setLoading(false);
    }
  };

  const linkProvider = async (provider) => {
    setError('');
    setSuccess('');

    try {
      const { data, error } = await supabase.auth.linkIdentity({
        provider: provider,
      });

      if (error) throw error;

      setSuccess(`–ê–∫–∫–∞—É–Ω—Ç ${provider} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!`);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏
      setTimeout(() => {
        loadIdentities();
        setSuccess('');
      }, 2000);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', err);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç ${provider}: ${err.message}`);
    }
  };

  const unlinkProvider = async (identity) => {
    if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç ${identity.provider}?`)) {
      return;
    }

    setError('');
    setSuccess('');

    try {
      const { error } = await supabase.auth.unlinkIdentity(identity);

      if (error) throw error;

      setSuccess(`–ê–∫–∫–∞—É–Ω—Ç ${identity.provider} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω!`);
      loadIdentities();
      setTimeout(() => setSuccess(''), 2000);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', err);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç: ${err.message}`);
    }
  };

  const getProviderName = (provider) => {
    const providers = {
      vk: '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
      telegram: 'Telegram',
      email: 'Email'
    };
    return providers[provider] || provider;
  };

  const getProviderIcon = (provider) => {
    const icons = {
      vk: 'üî∑',
      telegram: '‚úàÔ∏è',
      email: '‚úâÔ∏è'
    };
    return icons[provider] || 'üîó';
  };

  const availableProviders = ['telegram'];
  const connectedProviders = identities.map(id => id.provider);

  if (loading) {
    return <div className="connected-accounts-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="connected-accounts">
      <h3>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã</h3>

      {error && <div className="error-message">{error}</div>}
      {success && <div className="success-message">{success}</div>}

      <div className="accounts-section">
        <h4>–¢–µ–∫—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</h4>
        {identities.length === 0 ? (
          <p className="no-accounts">–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</p>
        ) : (
          <div className="accounts-list">
            {identities.map((identity) => (
              <div key={identity.id} className="account-item">
                <div className="account-info">
                  <span className="account-icon">{getProviderIcon(identity.provider)}</span>
                  <div className="account-details">
                    <span className="account-provider">{getProviderName(identity.provider)}</span>
                    {identity.identity_data?.email && (
                      <span className="account-email">{identity.identity_data.email}</span>
                    )}
                    {identity.identity_data?.full_name && (
                      <span className="account-name">{identity.identity_data.full_name}</span>
                    )}
                  </div>
                </div>
                {identities.length > 1 && identity.provider !== 'email' && (
                  <button
                    className="btn btn-danger btn-sm"
                    onClick={() => unlinkProvider(identity)}
                  >
                    –û—Ç–≤—è–∑–∞—Ç—å
                  </button>
                )}
              </div>
            ))}
          </div>
        )}
      </div>

      <div className="accounts-section">
        <h4>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞:</h4>
        <div className="available-providers">
          <p className="info-text">
            ‚ÑπÔ∏è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—Ö–æ–¥–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.
          </p>
          {availableProviders.map((provider) => {
            const isConnected = connectedProviders.includes(provider);
            return (
              <button
                key={provider}
                className={`btn btn-provider btn-${provider}`}
                onClick={() => linkProvider(provider)}
                disabled={isConnected}
              >
                <span className="provider-icon">{getProviderIcon(provider)}</span>
                <span className="provider-name">
                  {isConnected ? `‚úì ${getProviderName(provider)}` : `–ü–æ–¥–∫–ª—é—á–∏—Ç—å ${getProviderName(provider)}`}
                </span>
              </button>
            );
          })}
        </div>
      </div>

      <div className="accounts-info">
        <p>
          ‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –≤—Ö–æ–¥–∞ –∫ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.
          –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –≤—Ö–æ–¥–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.
        </p>
        <p className="warning">
          ‚ö†Ô∏è –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞.
          –ù–µ–ª—å–∑—è –æ—Ç–≤—è–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.
        </p>
      </div>
    </div>
  );
};

export default ConnectedAccounts;
