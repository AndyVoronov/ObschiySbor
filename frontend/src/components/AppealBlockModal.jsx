import { useState } from 'react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';
import './AppealBlockModal.css';

const AppealBlockModal = ({ isOpen, onClose, blockInfo, onSuccess }) => {
  const { user } = useAuth();
  const [reason, setReason] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const maxLength = 1000;

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!reason.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è');
      return;
    }

    if (reason.length > maxLength) {
      setError(`–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${maxLength} —Å–∏–º–≤–æ–ª–æ–≤`);
      return;
    }

    try {
      setLoading(true);
      setError('');

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: activeBlock, error: blockError } = await supabase
        .from('user_blocks')
        .select('id')
        .eq('user_id', user.id)
        .eq('is_active', true)
        .single();

      if (blockError) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ pending –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è
      const { data: existingAppeal, error: checkError } = await supabase
        .from('block_appeals')
        .select('id')
        .eq('user_id', user.id)
        .eq('block_id', activeBlock.id)
        .eq('status', 'pending')
        .maybeSingle();

      if (checkError && checkError.code !== 'PGRST116') {
        throw checkError;
      }

      if (existingAppeal) {
        setError('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ, –æ–∂–∏–¥–∞—é—â–µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è');
        return;
      }

      // –°–æ–∑–¥–∞—ë–º –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ
      const { error: insertError } = await supabase
        .from('block_appeals')
        .insert({
          user_id: user.id,
          block_id: activeBlock.id,
          reason: reason.trim(),
          status: 'pending'
        });

      if (insertError) throw insertError;

      alert('–í–∞—à–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤.');

      if (onSuccess) {
        onSuccess();
      } else {
        onClose();
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è:', err);
      setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content appeal-modal" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2>üìù –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</h2>
          <button className="modal-close" onClick={onClose}>√ó</button>
        </div>

        <div className="modal-body">
          {error && (
            <div className="error-message-appeal">
              {error}
            </div>
          )}

          <div className="appeal-info-box">
            <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–∏</h3>
            <ul>
              <li>–í–∞—à–µ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ <strong>48 —á–∞—Å–æ–≤</strong></li>
              <li>–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–π</li>
              <li>–ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã –≤ —Å–≤–æ–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏—è—Ö</li>
              <li>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è</li>
            </ul>
          </div>

          <form onSubmit={handleSubmit} className="appeal-form">
            <div className="form-group">
              <label htmlFor="appeal-reason">
                –ü—Ä–∏—á–∏–Ω–∞ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è <span className="required">*</span>
              </label>
              <textarea
                id="appeal-reason"
                value={reason}
                onChange={(e) => setReason(e.target.value)}
                placeholder="–û–±—ä—è—Å–Ω–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–π..."
                rows="8"
                maxLength={maxLength}
                disabled={loading}
                required
              />
              <div className="char-counter">
                {reason.length} / {maxLength} —Å–∏–º–≤–æ–ª–æ–≤
              </div>
            </div>

            <div className="modal-actions">
              <button
                type="button"
                className="btn-cancel-appeal"
                onClick={onClose}
                disabled={loading}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                className="btn-submit-appeal"
                disabled={loading || !reason.trim()}
              >
                {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default AppealBlockModal;
