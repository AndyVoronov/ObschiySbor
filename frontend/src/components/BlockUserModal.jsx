import { useState } from 'react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';
import './BlockUserModal.css';

const BlockUserModal = ({ isOpen, onClose, targetUser, onSuccess }) => {
  const { user } = useAuth();
  const [blockType, setBlockType] = useState('temporary');
  const [reason, setReason] = useState('');
  const [blockedUntil, setBlockedUntil] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ - –∑–∞–≤—Ç—Ä–∞
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const minDate = tomorrow.toISOString().slice(0, 16);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    if (!reason.trim()) {
      setError('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
      return;
    }

    if (blockType === 'temporary' && !blockedUntil) {
      setError('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
    if (blockType === 'temporary' && new Date(blockedUntil) <= new Date()) {
      setError('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
      return;
    }

    try {
      setLoading(true);

      const until = blockType === 'permanent' ? null : new Date(blockedUntil).toISOString();

      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ë–î block_user
      const { error: rpcError } = await supabase.rpc('block_user', {
        p_user_id: targetUser.id,
        p_blocked_by: user.id,
        p_reason: reason.trim(),
        p_blocked_until: until
      });

      if (rpcError) throw rpcError;

      const userName = targetUser.full_name || targetUser.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${userName}" —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);

      if (onSuccess) {
        onSuccess();
      }
      onClose();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', err);
      setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen || !targetUser) return null;

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content block-user-modal" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2>üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
          <button className="modal-close" onClick={onClose}>√ó</button>
        </div>

        <div className="modal-body">
          <div className="target-user-info">
            <h3>–ë–ª–æ–∫–∏—Ä—É–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</h3>
            <div className="user-card-block">
              {targetUser.avatar_url && (
                <img src={targetUser.avatar_url} alt="Avatar" className="user-avatar-small" />
              )}
              <div>
                <p className="user-name-block">{targetUser.full_name || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p className="user-email-block">{targetUser.email}</p>
              </div>
            </div>
          </div>

          {error && (
            <div className="error-message-block">
              {error}
            </div>
          )}

          <form onSubmit={handleSubmit} className="block-user-form">
            <div className="form-group">
              <label>
                –¢–∏–ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ <span className="required">*</span>
              </label>
              <div className="radio-group">
                <label className="radio-label">
                  <input
                    type="radio"
                    name="blockType"
                    value="temporary"
                    checked={blockType === 'temporary'}
                    onChange={(e) => setBlockType(e.target.value)}
                    disabled={loading}
                  />
                  <span>–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞</span>
                </label>
                <label className="radio-label">
                  <input
                    type="radio"
                    name="blockType"
                    value="permanent"
                    checked={blockType === 'permanent'}
                    onChange={(e) => setBlockType(e.target.value)}
                    disabled={loading}
                  />
                  <span>–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞</span>
                </label>
              </div>
            </div>

            {blockType === 'temporary' && (
              <div className="form-group">
                <label htmlFor="blockedUntil">
                  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ <span className="required">*</span>
                </label>
                <input
                  type="datetime-local"
                  id="blockedUntil"
                  value={blockedUntil}
                  onChange={(e) => setBlockedUntil(e.target.value)}
                  min={minDate}
                  disabled={loading}
                  required={blockType === 'temporary'}
                />
                <small className="field-hint">
                  –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                </small>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="blockReason">
                –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ <span className="required">*</span>
              </label>
              <textarea
                id="blockReason"
                value={reason}
                onChange={(e) => setReason(e.target.value)}
                placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)..."
                rows="5"
                maxLength="500"
                disabled={loading}
                required
              />
              <div className="char-counter">
                {reason.length} / 500 —Å–∏–º–≤–æ–ª–æ–≤
              </div>
            </div>

            <div className="warning-box">
              <p><strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</strong></p>
              <p>–ü–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</p>
              <ul>
                <li>–ù–µ —Å–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è</li>
                <li>–ù–µ —Å–º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö</li>
                <li>–ü–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã</li>
                <li>–°–º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</li>
              </ul>
            </div>

            <div className="modal-actions">
              <button
                type="button"
                className="btn-cancel-block"
                onClick={onClose}
                disabled={loading}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                className="btn-submit-block"
                disabled={loading || !reason.trim()}
              >
                {loading ? '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞...' : 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default BlockUserModal;
