import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';
import './FriendsList.css';

const FriendsList = () => {
  const { user } = useAuth();
  const [friends, setFriends] = useState([]);
  const [pendingRequests, setPendingRequests] = useState([]);
  const [sentRequests, setSentRequests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('friends'); // 'friends' | 'requests' | 'sent'

  useEffect(() => {
    if (user) {
      fetchFriendships();
    }
  }, [user]);

  const fetchFriendships = async () => {
    try {
      setLoading(true);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥—Ä—É–∂–µ—Å–∫–∏–µ —Å–≤—è–∑–∏
      const { data, error } = await supabase
        .from('friendships')
        .select(`
          id,
          user_id,
          friend_id,
          status,
          created_at,
          user:user_id (id, full_name, avatar_url, city),
          friend:friend_id (id, full_name, avatar_url, city)
        `)
        .or(`user_id.eq.${user.id},friend_id.eq.${user.id}`);

      if (error) throw error;

      // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const acceptedFriends = [];
      const incoming = [];
      const outgoing = [];

      data.forEach(friendship => {
        const isInitiator = friendship.user_id === user.id;
        const friendData = isInitiator ? friendship.friend : friendship.user;

        if (friendship.status === 'accepted') {
          acceptedFriends.push({
            ...friendData,
            friendshipId: friendship.id,
            since: friendship.created_at
          });
        } else if (friendship.status === 'pending') {
          if (isInitiator) {
            // –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å
            outgoing.push({
              ...friendData,
              friendshipId: friendship.id,
              sentAt: friendship.created_at
            });
          } else {
            // –ú–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å
            incoming.push({
              ...friendData,
              friendshipId: friendship.id,
              receivedAt: friendship.created_at
            });
          }
        }
      });

      setFriends(acceptedFriends);
      setPendingRequests(incoming);
      setSentRequests(outgoing);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleAcceptRequest = async (friendshipId) => {
    try {
      const { error } = await supabase
        .from('friendships')
        .update({ status: 'accepted' })
        .eq('id', friendshipId);

      if (error) throw error;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await fetchFriendships();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è');
    }
  };

  const handleRejectRequest = async (friendshipId) => {
    try {
      const { error } = await supabase
        .from('friendships')
        .delete()
        .eq('id', friendshipId);

      if (error) throw error;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await fetchFriendships();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å');
    }
  };

  const handleRemoveFriend = async (friendshipId) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –¥—Ä—É–≥–∞?')) return;

    try {
      const { error } = await supabase
        .from('friendships')
        .delete()
        .eq('id', friendshipId);

      if (error) throw error;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await fetchFriendships();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞');
    }
  };

  const handleCancelRequest = async (friendshipId) => {
    try {
      const { error } = await supabase
        .from('friendships')
        .delete()
        .eq('id', friendshipId);

      if (error) throw error;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await fetchFriendships();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å');
    }
  };

  if (loading) {
    return <div className="friends-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="friends-list-container">
      <div className="friends-tabs">
        <button
          className={`friends-tab ${activeTab === 'friends' ? 'active' : ''}`}
          onClick={() => setActiveTab('friends')}
        >
          –î—Ä—É–∑—å—è ({friends.length})
        </button>
        <button
          className={`friends-tab ${activeTab === 'requests' ? 'active' : ''}`}
          onClick={() => setActiveTab('requests')}
        >
          –ó–∞–ø—Ä–æ—Å—ã ({pendingRequests.length})
        </button>
        <button
          className={`friends-tab ${activeTab === 'sent' ? 'active' : ''}`}
          onClick={() => setActiveTab('sent')}
        >
          –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ ({sentRequests.length})
        </button>
      </div>

      <div className="friends-content">
        {activeTab === 'friends' && (
          <div className="friends-grid">
            {friends.length === 0 ? (
              <div className="friends-empty">
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</p>
                <p className="hint">–î–æ–±–∞–≤–ª—è–π—Ç–µ –ª—é–¥–µ–π –≤ –¥—Ä—É–∑—å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Å–æ–±—ã—Ç–∏–π!</p>
              </div>
            ) : (
              friends.map(friend => (
                <div key={friend.id} className="friend-card">
                  <div className="friend-avatar">
                    {friend.avatar_url ? (
                      <img src={friend.avatar_url} alt={friend.full_name} />
                    ) : (
                      <div className="avatar-placeholder">üë§</div>
                    )}
                  </div>
                  <div className="friend-info">
                    <h4>{friend.full_name || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</h4>
                    {friend.city && <p className="friend-city">üìç {friend.city}</p>}
                    <p className="friend-since">
                      –î—Ä—É–∑—å—è —Å {new Date(friend.since).toLocaleDateString('ru-RU')}
                    </p>
                  </div>
                  <div className="friend-actions">
                    <button
                      className="btn-remove-friend"
                      onClick={() => handleRemoveFriend(friend.friendshipId)}
                      title="–£–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π"
                    >
                      ‚ùå
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        )}

        {activeTab === 'requests' && (
          <div className="friends-grid">
            {pendingRequests.length === 0 ? (
              <div className="friends-empty">
                <p>–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è</p>
              </div>
            ) : (
              pendingRequests.map(request => (
                <div key={request.id} className="friend-card request">
                  <div className="friend-avatar">
                    {request.avatar_url ? (
                      <img src={request.avatar_url} alt={request.full_name} />
                    ) : (
                      <div className="avatar-placeholder">üë§</div>
                    )}
                  </div>
                  <div className="friend-info">
                    <h4>{request.full_name || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</h4>
                    {request.city && <p className="friend-city">üìç {request.city}</p>}
                    <p className="request-time">
                      –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω {new Date(request.receivedAt).toLocaleDateString('ru-RU')}
                    </p>
                  </div>
                  <div className="friend-actions">
                    <button
                      className="btn-accept"
                      onClick={() => handleAcceptRequest(request.friendshipId)}
                      title="–ü—Ä–∏–Ω—è—Ç—å"
                    >
                      ‚úì
                    </button>
                    <button
                      className="btn-reject"
                      onClick={() => handleRejectRequest(request.friendshipId)}
                      title="–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
                    >
                      ‚úó
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        )}

        {activeTab === 'sent' && (
          <div className="friends-grid">
            {sentRequests.length === 0 ? (
              <div className="friends-empty">
                <p>–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</p>
              </div>
            ) : (
              sentRequests.map(request => (
                <div key={request.id} className="friend-card sent">
                  <div className="friend-avatar">
                    {request.avatar_url ? (
                      <img src={request.avatar_url} alt={request.full_name} />
                    ) : (
                      <div className="avatar-placeholder">üë§</div>
                    )}
                  </div>
                  <div className="friend-info">
                    <h4>{request.full_name || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</h4>
                    {request.city && <p className="friend-city">üìç {request.city}</p>}
                    <p className="request-time">
                      –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {new Date(request.sentAt).toLocaleDateString('ru-RU')}
                    </p>
                  </div>
                  <div className="friend-actions">
                    <button
                      className="btn-cancel"
                      onClick={() => handleCancelRequest(request.friendshipId)}
                      title="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
                    >
                      –û—Ç–º–µ–Ω–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default FriendsList;
