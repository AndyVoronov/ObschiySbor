/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Supabase REST API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ PostgREST
 */

const SUPABASE_URL = 'https://wrfcpsljchyetbmupqgc.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndyZmNwc2xqY2h5ZXRibXVwcWdjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkyOTY4MDQsImV4cCI6MjA3NDg3MjgwNH0.df9yt9tIP58S8JTPgvpreKqpVGkb01NtC1e7kYgg0rc';

// –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
const sqlQueries = [
  // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã profiles
  `CREATE TABLE IF NOT EXISTS profiles (
    id UUID REFERENCES auth.users(id) PRIMARY KEY,
    full_name TEXT,
    avatar_url TEXT,
    city TEXT,
    interests TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
  );`,

  // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã events
  `CREATE TABLE IF NOT EXISTS events (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    category TEXT NOT NULL CHECK (category IN ('board_games', 'cycling', 'hiking')),
    event_date TIMESTAMP WITH TIME ZONE NOT NULL,
    location TEXT NOT NULL,
    max_participants INTEGER NOT NULL DEFAULT 10,
    current_participants INTEGER NOT NULL DEFAULT 0,
    creator_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
    status TEXT NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'cancelled', 'completed')),
    category_data JSONB,
    image_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
  );`,

  // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã event_participants
  `CREATE TABLE IF NOT EXISTS event_participants (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    event_id UUID REFERENCES events(id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
    status TEXT NOT NULL DEFAULT 'joined' CHECK (status IN ('joined', 'left', 'banned')),
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(event_id, user_id)
  );`,

  // 4. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
  `CREATE INDEX IF NOT EXISTS idx_events_category ON events(category);`,
  `CREATE INDEX IF NOT EXISTS idx_events_event_date ON events(event_date);`,
  `CREATE INDEX IF NOT EXISTS idx_events_creator_id ON events(creator_id);`,
  `CREATE INDEX IF NOT EXISTS idx_event_participants_event_id ON event_participants(event_id);`,
  `CREATE INDEX IF NOT EXISTS idx_event_participants_user_id ON event_participants(user_id);`,

  // 5. –í–∫–ª—é—á–µ–Ω–∏–µ RLS
  `ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;`,
  `ALTER TABLE events ENABLE ROW LEVEL SECURITY;`,
  `ALTER TABLE event_participants ENABLE ROW LEVEL SECURITY;`,
];

const policies = [
  // –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è profiles
  `DROP POLICY IF EXISTS "Profiles are viewable by everyone" ON profiles;`,
  `CREATE POLICY "Profiles are viewable by everyone" ON profiles FOR SELECT USING (true);`,
  `DROP POLICY IF EXISTS "Users can update own profile" ON profiles;`,
  `CREATE POLICY "Users can update own profile" ON profiles FOR UPDATE USING (auth.uid() = id);`,

  // –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è events
  `DROP POLICY IF EXISTS "Events are viewable by everyone" ON events;`,
  `CREATE POLICY "Events are viewable by everyone" ON events FOR SELECT USING (true);`,
  `DROP POLICY IF EXISTS "Authenticated users can create events" ON events;`,
  `CREATE POLICY "Authenticated users can create events" ON events FOR INSERT WITH CHECK (auth.uid() = creator_id);`,
  `DROP POLICY IF EXISTS "Creators can update events" ON events;`,
  `CREATE POLICY "Creators can update events" ON events FOR UPDATE USING (auth.uid() = creator_id);`,
  `DROP POLICY IF EXISTS "Creators can delete events" ON events;`,
  `CREATE POLICY "Creators can delete events" ON events FOR DELETE USING (auth.uid() = creator_id);`,

  // –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è event_participants
  `DROP POLICY IF EXISTS "Participants are viewable by everyone" ON event_participants;`,
  `CREATE POLICY "Participants are viewable by everyone" ON event_participants FOR SELECT USING (true);`,
  `DROP POLICY IF EXISTS "Users can join events" ON event_participants;`,
  `CREATE POLICY "Users can join events" ON event_participants FOR INSERT WITH CHECK (auth.uid() = user_id);`,
  `DROP POLICY IF EXISTS "Users can leave events" ON event_participants;`,
  `CREATE POLICY "Users can leave events" ON event_participants FOR DELETE USING (auth.uid() = user_id);`,
];

const functions = [
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  `CREATE OR REPLACE FUNCTION public.handle_new_user()
  RETURNS trigger AS $$
  BEGIN
    INSERT INTO public.profiles (id, full_name, avatar_url)
    VALUES (
      new.id,
      COALESCE(new.raw_user_meta_data->>'full_name', ''),
      COALESCE(new.raw_user_meta_data->>'avatar_url', '')
    );
    RETURN new;
  END;
  $$ LANGUAGE plpgsql SECURITY DEFINER;`,

  `DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;`,
  `CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();`,

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
  `CREATE OR REPLACE FUNCTION update_updated_at_column()
  RETURNS TRIGGER AS $$
  BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
  END;
  $$ LANGUAGE plpgsql;`,

  `DROP TRIGGER IF EXISTS update_profiles_updated_at ON profiles;`,
  `CREATE TRIGGER update_profiles_updated_at
    BEFORE UPDATE ON profiles
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();`,

  `DROP TRIGGER IF EXISTS update_events_updated_at ON events;`,
  `CREATE TRIGGER update_events_updated_at
    BEFORE UPDATE ON events
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();`,
];

async function executeSQL(sql) {
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc`, {
      method: 'POST',
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ query: sql })
    });

    return { success: response.ok, status: response.status, data: await response.text() };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

async function setupDatabase() {
  console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n');
  console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Supabase Dashboard:\n');

  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π SQL —Å–∫—Ä–∏–ø—Ç
  const fullSQL = [
    '-- ObschiySbor Database Schema',
    '-- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
    '',
    '-- –¢–∞–±–ª–∏—Ü—ã',
    ...sqlQueries,
    '',
    '-- –ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    ...policies,
    '',
    '-- –§—É–Ω–∫—Ü–∏–∏ –∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã',
    ...functions,
  ].join('\n');

  console.log('=' .repeat(70));
  console.log(fullSQL);
  console.log('=' .repeat(70));

  console.log('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é:');
  console.log('\n1. –û—Ç–∫—Ä–æ–π—Ç–µ https://supabase.com/dashboard/project/wrfcpsljchyetbmupqgc');
  console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "SQL Editor"');
  console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π query');
  console.log('4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å SQL –≤—ã—à–µ');
  console.log('5. –í—Å—Ç–∞–≤—å—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "Run"');
  console.log('\n‚úÖ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node init-db.js –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n');

  // –°–æ—Ö—Ä–∞–Ω–∏–º SQL –≤ —Ñ–∞–π–ª
  const fs = await import('fs');
  fs.writeFileSync('./database/quick-schema.sql', fullSQL);
  console.log('üíæ SQL —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: database/quick-schema.sql\n');
}

setupDatabase();
